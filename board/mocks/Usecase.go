// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddMember provides a mock function with given fields: requesterID, boardID, memberID
func (_m *Usecase) AddMember(requesterID primitive.ObjectID, boardID primitive.ObjectID, memberID primitive.ObjectID) error {
	ret := _m.Called(requesterID, boardID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(requesterID, boardID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: userID, title, visibility, boardCover
func (_m *Usecase) Create(userID primitive.ObjectID, title string, visibility string, boardCover map[string]interface{}) error {
	ret := _m.Called(userID, title, visibility, boardCover)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string, string, map[string]interface{}) error); ok {
		r0 = rf(userID, title, visibility, boardCover)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemberRole provides a mock function with given fields: requesterID, boardID, memberID, role
func (_m *Usecase) UpdateMemberRole(requesterID primitive.ObjectID, boardID primitive.ObjectID, memberID primitive.ObjectID, role string) error {
	ret := _m.Called(requesterID, boardID, memberID, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID, primitive.ObjectID, string) error); ok {
		r0 = rf(requesterID, boardID, memberID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t mockConstructorTestingTNewUsecase) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
